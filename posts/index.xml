<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on 页面仔的笔记</title><link>/posts/</link><description>Recent content in Posts on 页面仔的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2020 LayoutBoy.</copyright><lastBuildDate>Mon, 27 Apr 2020 12:23:17 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>从 LetsEncrypt 获取免费的泛域名 SSL 证书</title><link>/2020/04/27/%E4%BB%8E-letsencrypt-%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E7%9A%84%E6%B3%9B%E5%9F%9F%E5%90%8D-ssl-%E8%AF%81%E4%B9%A6/</link><pubDate>Mon, 27 Apr 2020 12:23:17 +0800</pubDate><guid>/2020/04/27/%E4%BB%8E-letsencrypt-%E8%8E%B7%E5%8F%96%E5%85%8D%E8%B4%B9%E7%9A%84%E6%B3%9B%E5%9F%9F%E5%90%8D-ssl-%E8%AF%81%E4%B9%A6/</guid><description>lvvme.com 是单域名，*.lvvme.com 是泛域名。如果自己的网站除了主域名外还有类似与 img.lvvme.com、 file.lvvme.com 之类的子域名，使用泛域名证书是</description></item><item><title>更新 Ubuntu 到最新的 LTS 版本</title><link>/2020/04/26/%E6%9B%B4%E6%96%B0-ubuntu-%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84-lts-%E7%89%88%E6%9C%AC/</link><pubDate>Sun, 26 Apr 2020 21:44:44 +0800</pubDate><guid>/2020/04/26/%E6%9B%B4%E6%96%B0-ubuntu-%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84-lts-%E7%89%88%E6%9C%AC/</guid><description>Ubuntu 20.04 已经发布几天了，我购买的阿里云官方镜像还是只有 18.04 版本。 首先需要更新所有软件包到最新到版本： sudo apt-get update -y &amp;amp;&amp;amp; sudo apt-get upgrade -y 然后开始升级： sudo do-release-upgrade -d Checking for a new</description></item><item><title>Nginx 重定向 HTTP 请求到 HTTPS 端口</title><link>/2020/04/16/nginx-%E9%87%8D%E5%AE%9A%E5%90%91-http-%E8%AF%B7%E6%B1%82%E5%88%B0-https-%E7%AB%AF%E5%8F%A3/</link><pubDate>Thu, 16 Apr 2020 09:04:59 +0800</pubDate><guid>/2020/04/16/nginx-%E9%87%8D%E5%AE%9A%E5%90%91-http-%E8%AF%B7%E6%B1%82%E5%88%B0-https-%E7%AB%AF%E5%8F%A3/</guid><description>如果配置了 nginx 只允许 HTTPS 访问，在浏览器里不加 https:// 访问的话就会报错，添加一个 301 重定向 https 可以解决问题。 server { listen ${HTTP_PORT} ssl http2; ssl_certificate /opt/certs/server.crt; ssl_certificate_key /opt/certs/server.key; error_page 497 301 https://$http_host$request_uri; }</description></item><item><title>Brew 编译 FFMpeg 4.2.2</title><link>/2020/04/14/brew-%E7%BC%96%E8%AF%91-ffmpeg-4.2.2/</link><pubDate>Tue, 14 Apr 2020 16:24:46 +0800</pubDate><guid>/2020/04/14/brew-%E7%BC%96%E8%AF%91-ffmpeg-4.2.2/</guid><description>&lt;p>只需要直接编译的话，直接看这里：&lt;/p>
&lt;p>&lt;a href="https://github.com/cntrump/brew-build-ffmpeg">https://github.com/cntrump/brew-build-ffmpeg&lt;/a>&lt;/p>
&lt;h2 id="编译过程笔记">编译过程笔记&lt;/h2>
&lt;p>&lt;a href="https://ffmpeg.org/download.html"target="_blank">FFMpeg.org&lt;/a> 已经提供了编译好的静态版本： &lt;a href="https://evermeet.cx/ffmpeg/"target="_blank">Static builds for macOS 64-bit&lt;/a>。&lt;/p>
&lt;p>如果需要在这个版本的基础上增加 AAC 的支持，就需要自己编译。&lt;/p></description></item><item><title>高质量 H.264 视频编码推荐设置</title><link>/2020/04/12/%E9%AB%98%E8%B4%A8%E9%87%8F-h.264-%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/</link><pubDate>Sun, 12 Apr 2020 23:31:54 +0800</pubDate><guid>/2020/04/12/%E9%AB%98%E8%B4%A8%E9%87%8F-h.264-%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE/</guid><description>&lt;p>&lt;a href="http://www.lighterra.com/papers/videoencodingh264"target="_blank">Video Encoding Settings for H.264 Excellence&lt;/a>&lt;/p></description></item><item><title>Ubuntu 以普通用户启动 Docker</title><link>/2020/04/12/ubuntu-%E4%BB%A5%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8-docker/</link><pubDate>Sun, 12 Apr 2020 11:39:52 +0800</pubDate><guid>/2020/04/12/ubuntu-%E4%BB%A5%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%90%AF%E5%8A%A8-docker/</guid><description>以下操作在 Ubuntu 18.04 中执行。 创建一个普通用户 root 身份下添加一个普通用户 lvv： useradd lvv 设置密码： passwd lvv 设置默认 Shell： usermod -s /bin/bash lvv 让用户可以执行 sudo，</description></item><item><title>OpenSSL 创建自签名 SSL 证书</title><link>/2020/04/10/openssl-%E5%88%9B%E5%BB%BA%E8%87%AA%E7%AD%BE%E5%90%8D-ssl-%E8%AF%81%E4%B9%A6/</link><pubDate>Fri, 10 Apr 2020 09:20:19 +0800</pubDate><guid>/2020/04/10/openssl-%E5%88%9B%E5%BB%BA%E8%87%AA%E7%AD%BE%E5%90%8D-ssl-%E8%AF%81%E4%B9%A6/</guid><description>#!/bin/sh set -e DOMAIN=example.com openssl genrsa -des3 -passout pass:x -out ${DOMAIN}.pass.key 2048 openssl rsa -passin pass:x -in ${DOMAIN}.pass.key -out ${DOMAIN}.key rm ${DOMAIN}.pass.key openssl req -new -key ${DOMAIN}.key -out ${DOMAIN}.csr openssl x509 -req -sha256 -days 365 -in ${DOMAIN}.csr -signkey ${DOMAIN}.key -out ${DOMAIN}.crt</description></item><item><title>自定义 BlurEffect</title><link>/2020/03/25/%E8%87%AA%E5%AE%9A%E4%B9%89-blureffect/</link><pubDate>Wed, 25 Mar 2020 13:28:09 +0800</pubDate><guid>/2020/03/25/%E8%87%AA%E5%AE%9A%E4%B9%89-blureffect/</guid><description>系统提供的 UIBlurEffect 毛玻璃效果不能调整参数，只能选择内置的几个效果。 要实现自定义的毛玻璃效果，需要使用私有类 _UICustomBlurEffect，</description></item><item><title>搜索项目里的私有 API</title><link>/2020/03/06/%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84%E7%A7%81%E6%9C%89-api/</link><pubDate>Fri, 06 Mar 2020 01:56:33 +0800</pubDate><guid>/2020/03/06/%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84%E7%A7%81%E6%9C%89-api/</guid><description>&lt;p>最近提交新版本到 AppStore ，总是收到 &lt;code>ITMS-90809: Deprecated API Usage&lt;/code> 警告信息，说是项目里引用了即将废弃的 &lt;code>UIWebView&lt;/code>，建议全部替换为 &lt;code>WKWebView&lt;/code>。&lt;/p></description></item><item><title>禁用 iOS 自动检查下载系统更新</title><link>/2020/02/24/%E7%A6%81%E7%94%A8-ios-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%9F%A5%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</link><pubDate>Mon, 24 Feb 2020 00:43:26 +0800</pubDate><guid>/2020/02/24/%E7%A6%81%E7%94%A8-ios-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%9F%A5%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</guid><description>iOS 总是会在接通电源并且连接 Wi-Fi 的情况下自动去检查和下载更新，在新系统发布的时候往往需要消耗几个 G 的流量。 对于开发者来说，开发需要测试不同的系统</description></item><item><title>Swift 创建纯代码的 macOS &amp; iOS 应用</title><link>/2020/02/22/swift-%E5%88%9B%E5%BB%BA%E7%BA%AF%E4%BB%A3%E7%A0%81%E7%9A%84-macos-ios-%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 22 Feb 2020 20:22:25 +0800</pubDate><guid>/2020/02/22/swift-%E5%88%9B%E5%BB%BA%E7%BA%AF%E4%BB%A3%E7%A0%81%E7%9A%84-macos-ios-%E5%BA%94%E7%94%A8/</guid><description>纯代码创建 macOS 应用 默认情况下使用 Xcode 创建的 macOS APP 是基于 storyboard 的，对于多人协作的项目，使用纯代码创建界面比 storyboard 更方便。 首先删掉 storyboard 和相关的设置 删除 Main.storyboard 和 Info.plist 里的</description></item><item><title>iOS 接入 IAP 指南</title><link>/2020/02/14/ios-%E6%8E%A5%E5%85%A5-iap-%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 14 Feb 2020 21:10:02 +0800</pubDate><guid>/2020/02/14/ios-%E6%8E%A5%E5%85%A5-iap-%E6%8C%87%E5%8D%97/</guid><description>&lt;p>如果 APP 里需要购买虚拟商品，只能通过苹果的 IAP，否则审核会被拒绝。&lt;/p>
&lt;p>接入 IAP 不复杂，只要遵守以下流程，就不会出现“掉单”的情况。&lt;/p></description></item><item><title>iOS13 使用系统里的第三方字体</title><link>/2020/02/09/ios13-%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%87%8C%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%97%E4%BD%93/</link><pubDate>Sun, 09 Feb 2020 12:29:14 +0800</pubDate><guid>/2020/02/09/ios13-%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%87%8C%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%97%E4%BD%93/</guid><description>iOS13 支持安装自定义字体到系统里了，要想自己开发的 APP 能使用这些字体，需要做一些适配工作。 配置项目的 Capability 添加 Fonts 支持，勾选 Use Installed Fonts： 使用 UIFontPickerViewController UIFontPickerViewController 是 iOS13</description></item><item><title>iOS13 安装自定义字体</title><link>/2020/02/09/ios13-%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</link><pubDate>Sun, 09 Feb 2020 11:42:18 +0800</pubDate><guid>/2020/02/09/ios13-%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</guid><description>在 iOS13 之前，就可以通过奇技淫巧的方式安装自制字体，到了 iOS13 官方终于把这种方式合法化了。 介绍两款适配了 iOS13 自定义字体功能的 APP，看一下如何安装自定</description></item><item><title>iOS 显示模态 VC 时保持状态栏的风格不变</title><link>/2020/02/05/ios-%E6%98%BE%E7%A4%BA%E6%A8%A1%E6%80%81-vc-%E6%97%B6%E4%BF%9D%E6%8C%81%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B8%8D%E5%8F%98/</link><pubDate>Wed, 05 Feb 2020 16:46:29 +0800</pubDate><guid>/2020/02/05/ios-%E6%98%BE%E7%A4%BA%E6%A8%A1%E6%80%81-vc-%E6%97%B6%E4%BF%9D%E6%8C%81%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B8%8D%E5%8F%98/</guid><description>&lt;p>系统的组件 &lt;code>UIAlertController&lt;/code> 在显示的时候，是不会改变状态栏的风格的。&lt;/p>
&lt;p>有时候我们的自定义组件也需要这样的效果。&lt;/p></description></item><item><title>解决适配 iOS13 后 UIMenuController 不能正常弹出的问题</title><link>/2020/02/02/%E8%A7%A3%E5%86%B3%E9%80%82%E9%85%8D-ios13-%E5%90%8E-uimenucontroller-%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%BC%B9%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 02 Feb 2020 12:07:59 +0800</pubDate><guid>/2020/02/02/%E8%A7%A3%E5%86%B3%E9%80%82%E9%85%8D-ios13-%E5%90%8E-uimenucontroller-%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%BC%B9%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在 iOS13 以前，大家的 Window 都是在 &lt;code>AppDelegate&lt;/code> 里进行初始化：&lt;/p></description></item><item><title>Git 的 core.autocrlf 设置说明</title><link>/2020/02/01/git-%E7%9A%84-core.autocrlf-%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</link><pubDate>Sat, 01 Feb 2020 14:40:57 +0800</pubDate><guid>/2020/02/01/git-%E7%9A%84-core.autocrlf-%E8%AE%BE%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid><description>众所周知，Windows 和 Unix/Linux 的操作对文本换行有不同的标准。 Windows 默认是 \r\n，而 Unix/Linux 则使用 \n。 Git 的 core.autocrlf 用来指定提交时如何处理回车和换行，用法如下</description></item><item><title>从 pkg 安装包中提取 MicrosoftEdge APP</title><link>/2020/01/16/%E4%BB%8E-pkg-%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%AD%E6%8F%90%E5%8F%96-microsoftedge-app/</link><pubDate>Thu, 16 Jan 2020 12:47:50 +0800</pubDate><guid>/2020/01/16/%E4%BB%8E-pkg-%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%AD%E6%8F%90%E5%8F%96-microsoftedge-app/</guid><description>微软的新 Edge 终于发布了，全面使用 Chromium 内核，对于 Web 开发来说是好事，以后不用单独适配和测试。 官方的下载地址： https://www.microsoft.com/en-us/edge Windows 和 macOS 都已经是正式版本 macOS 的安装包是 pkg 格</description></item><item><title>macOS 上下载 iOS APP 安装包</title><link>/2020/01/15/macos-%E4%B8%8A%E4%B8%8B%E8%BD%BD-ios-app-%E5%AE%89%E8%A3%85%E5%8C%85/</link><pubDate>Wed, 15 Jan 2020 17:09:33 +0800</pubDate><guid>/2020/01/15/macos-%E4%B8%8A%E4%B8%8B%E8%BD%BD-ios-app-%E5%AE%89%E8%A3%85%E5%8C%85/</guid><description>使用的工具是 App Configurator 2 先把手机连接上电脑，然后在手机上安装一次 APP。 再使用「添加APP」功能在已购列表里选择需要下载的APP，比如微信： 正在下</description></item><item><title>iOS 无卡顿同时使用圆角、阴影和边框</title><link>/2020/01/11/ios-%E6%97%A0%E5%8D%A1%E9%A1%BF%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9C%86%E8%A7%92%E9%98%B4%E5%BD%B1%E5%92%8C%E8%BE%B9%E6%A1%86/</link><pubDate>Sat, 11 Jan 2020 18:13:01 +0800</pubDate><guid>/2020/01/11/ios-%E6%97%A0%E5%8D%A1%E9%A1%BF%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9C%86%E8%A7%92%E9%98%B4%E5%BD%B1%E5%92%8C%E8%BE%B9%E6%A1%86/</guid><description>在 iOS 开发中，最怕看到设计稿里圆角、阴影和边框同时出现，这三兄弟简直就是性能杀手。 优化的方法百度一下有很多，虽然方法不同但是原理都一样。 分享一</description></item><item><title>macOS 上开启内置的 HTTP Server</title><link>/2020/01/11/macos-%E4%B8%8A%E5%BC%80%E5%90%AF%E5%86%85%E7%BD%AE%E7%9A%84-http-server/</link><pubDate>Sat, 11 Jan 2020 14:34:44 +0800</pubDate><guid>/2020/01/11/macos-%E4%B8%8A%E5%BC%80%E5%90%AF%E5%86%85%E7%BD%AE%E7%9A%84-http-server/</guid><description>macOS 内置有 Apache 服务，只是默认是关闭的。 启动 Apache 服务： sudo apachectl start切换到要启动 Web 服务的目录： cd ./webroot/python -m SimpleHTTPServer 8080可以看到启动日志： Serving HTTP on 0.0.0.0 port 8080 ... 就可以</description></item><item><title>解决 space-between 最后一行的对齐问题</title><link>/2020/01/02/%E8%A7%A3%E5%86%B3-space-between-%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E7%9A%84%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 02 Jan 2020 20:43:20 +0800</pubDate><guid>/2020/01/02/%E8%A7%A3%E5%86%B3-space-between-%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E7%9A%84%E5%AF%B9%E9%BD%90%E9%97%AE%E9%A2%98/</guid><description>接这篇文章。 如果给 .flex 容器加上 space-between 平均分布对齐的方式： .flex { ... justify-content: space-between; ... } space-between 的效果 因为最后一行的元素数量特别少，平均到的间距就很大。 但是这不符合设计预</description></item><item><title>CSS flex wrap 布局中设置元素间距</title><link>/2020/01/02/css-flex-wrap-%E5%B8%83%E5%B1%80%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E9%97%B4%E8%B7%9D/</link><pubDate>Thu, 02 Jan 2020 00:00:00 +0800</pubDate><guid>/2020/01/02/css-flex-wrap-%E5%B8%83%E5%B1%80%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%85%83%E7%B4%A0%E9%97%B4%E8%B7%9D/</guid><description>CSS flex wrap 布局里，没有直接设置间距的参数，默认情况下各元素会紧贴着排列在一起。 一个普通的 flex wrap 布局代码： .box { width: 414px; height: 736px; margin: 0 auto; border: 1px solid blue; } .flex { display: flex; flex-wrap: wrap; border:</description></item><item><title>Swift 使用字面量协议扩展 DispatchTime</title><link>/2019/12/30/swift-%E4%BD%BF%E7%94%A8%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8D%8F%E8%AE%AE%E6%89%A9%E5%B1%95-dispatchtime/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/30/swift-%E4%BD%BF%E7%94%A8%E5%AD%97%E9%9D%A2%E9%87%8F%E5%8D%8F%E8%AE%AE%E6%89%A9%E5%B1%95-dispatchtime/</guid><description>DispatchTime 的参数是时间，单位既不是秒也不是毫秒，而是纳秒。 使用的方法如下： DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + .seconds(5)) { // Do your work here } 延迟 5 秒执行，就要写为：DispatchTime.n</description></item><item><title>checkra1n 越狱后连接 SSH</title><link>/2019/12/28/checkra1n-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%BF%9E%E6%8E%A5-ssh/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/28/checkra1n-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%BF%9E%E6%8E%A5-ssh/</guid><description>checkra1n是利用硬件漏洞越狱的工具，与操作系统版本无关。 支持的设备是 iPhone 5s – iPhone X，iOS 12.3+ 越狱成功后默认已经运行了 SSH 服务，端口号是 44</description></item><item><title>使用 Github Pages 发布博客</title><link>/2019/12/28/%E4%BD%BF%E7%94%A8-github-pages-%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/28/%E4%BD%BF%E7%94%A8-github-pages-%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</guid><description>不同于网上的教程，我不依赖 Web Hooks。 在 Github 上创建一个公开仓库，并且开通 Pages 服务（通过创建 用户名.github.io 仓库或者给现有仓库创建 gh-pages 分</description></item><item><title>本博客启用 LayoutBoy.com 域名</title><link>/2019/12/28/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E5%90%AF%E7%94%A8-layoutboy.com-%E5%9F%9F%E5%90%8D/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/28/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E5%90%AF%E7%94%A8-layoutboy.com-%E5%9F%9F%E5%90%8D/</guid><description>本博客正式使用永久域名： LayoutBoy.com Layout Boy：页面仔</description></item><item><title>在越狱后的 iOS 上更新 Lookin 链接库</title><link>/2019/12/27/%E5%9C%A8%E8%B6%8A%E7%8B%B1%E5%90%8E%E7%9A%84-ios-%E4%B8%8A%E6%9B%B4%E6%96%B0-lookin-%E9%93%BE%E6%8E%A5%E5%BA%93/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/27/%E5%9C%A8%E8%B6%8A%E7%8B%B1%E5%90%8E%E7%9A%84-ios-%E4%B8%8A%E6%9B%B4%E6%96%B0-lookin-%E9%93%BE%E6%8E%A5%E5%BA%93/</guid><description>Lookin 是免费的 iOS App UI 分析工具，还具有简单的动态调试功能。 越狱后如果要对第三方 App 进行界面分析，需要安装 LookinLoader 插件。 这个插件加载 LookinServer.framework 的路径是 /usr/li</description></item><item><title>Hugo 主题开发笔记</title><link>/2019/12/26/hugo-%E4%B8%BB%E9%A2%98%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/26/hugo-%E4%B8%BB%E9%A2%98%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</guid><description>我的极简 Hugo 主题 Notepadium 已被收录到官方主题推荐列表。 记录一下开发过程中的一些心得。 开发过程中 避免生成多余空行 Hugo 处理源文件时，会把 go 标记 {{ }} 所在行替换</description></item><item><title>使用 OpenSSL 计算脚本文件的 SHA384</title><link>/2019/12/25/%E4%BD%BF%E7%94%A8-openssl-%E8%AE%A1%E7%AE%97%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84-sha384/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/25/%E4%BD%BF%E7%94%A8-openssl-%E8%AE%A1%E7%AE%97%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84-sha384/</guid><description>比如要计算 CDN 中 MathJax 的 sha384，先把脚本下载回来： curl -O https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js openssl dgst -sha384 -binary MathJax.js | openssl base64 -A 输出结果： e/4/LvThKH1gwzXhdbY2AsjR3rm7LHWyhIG5C0jiRfn8AN2eTN5ILeztWw0H9jmN% 最后的 % 表示结束，不是 Hash 的一部分。 使用如下： &amp;lt;script defer type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34; integrity=&amp;#34;sha384-e/4/LvThKH1gwzXhdbY2AsjR3rm7LHWyhIG5C0jiRfn8AN2eTN5ILeztWw0H9jmN&amp;#34;</description></item><item><title>给 MathJax 加上 Github 风格语法高亮</title><link>/2019/12/25/%E7%BB%99-mathjax-%E5%8A%A0%E4%B8%8A-github-%E9%A3%8E%E6%A0%BC%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/25/%E7%BB%99-mathjax-%E5%8A%A0%E4%B8%8A-github-%E9%A3%8E%E6%A0%BC%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE/</guid><description>先看效果图： 添加以下 CSS 代码即可： .markdown-body p &amp;gt; span.math { display: inline-block; font-size: 85%; padding: 2px 4px; border-radius: 3px; color: #24292e; background-color: #f6f8fa; } .markdown-body .math .mo { color: #d73a49; } .markdown-body .math .mn { color: #005cc5; }</description></item><item><title>使用 Hugo v0.62 的渲染钩子（Render hooks）</title><link>/2019/12/24/%E4%BD%BF%E7%94%A8-hugo-v0.62-%E7%9A%84%E6%B8%B2%E6%9F%93%E9%92%A9%E5%AD%90render-hooks/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/24/%E4%BD%BF%E7%94%A8-hugo-v0.62-%E7%9A%84%E6%B8%B2%E6%9F%93%E9%92%A9%E5%AD%90render-hooks/</guid><description>Hugo 发布了新版本 0.62.0，新增加了 Markdown 渲染钩子（Render Hooks）的功能。 渲染钩子是 Goldmark 引擎的新特性，利用渲染钩子可以替代 shortcode 来实现自定义</description></item><item><title>iOS 格式化浮点数时去掉末尾的 0</title><link>/2019/12/16/ios-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0%E6%97%B6%E5%8E%BB%E6%8E%89%E6%9C%AB%E5%B0%BE%E7%9A%84-0/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/16/ios-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0%E6%97%B6%E5%8E%BB%E6%8E%89%E6%9C%AB%E5%B0%BE%E7%9A%84-0/</guid><description>有时候需要把浮点数格式化为字符串显示到界面上，需要去掉末尾多余的 0。 例如 108 * 0.95 希望界面上显示的结果为 102.6 而不是 102.600000 很简单，使用下面的方式进行格式</description></item><item><title>运用 AutoLayout 的优先级例子</title><link>/2019/12/14/%E8%BF%90%E7%94%A8-autolayout-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E4%BE%8B%E5%AD%90/</link><pubDate>Sat, 14 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/14/%E8%BF%90%E7%94%A8-autolayout-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E4%BE%8B%E5%AD%90/</guid><description>当约束条件发生冲突时，系统会使用用优先级高的约束。 还可以通过设置约束为 deactive 状态来使约束不生效。 利用好约束的优先级，可以使布局代码简洁、逻辑清晰</description></item><item><title>导出全部 Chroma 主题 CSS 文件</title><link>/2019/12/11/%E5%AF%BC%E5%87%BA%E5%85%A8%E9%83%A8-chroma-%E4%B8%BB%E9%A2%98-css-%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 11 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/11/%E5%AF%BC%E5%87%BA%E5%85%A8%E9%83%A8-chroma-%E4%B8%BB%E9%A2%98-css-%E6%96%87%E4%BB%B6/</guid><description>Chroma 是 hugo 默认使用的开源语法高亮引擎，使用 Go 语言编写，渲染速度很快。 使用以下 shell 脚本可以把内置的主题都导出为 CSS 文件： #!/bin/zsh styles=( \ abap \ algol \ algol_nu \ api \ arduino \ autumn \</description></item><item><title>给 Hugo 开启 Disqus 评论系统</title><link>/2019/12/10/%E7%BB%99-hugo-%E5%BC%80%E5%90%AF-disqus-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link><pubDate>Tue, 10 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/10/%E7%BB%99-hugo-%E5%BC%80%E5%90%AF-disqus-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid><description>Hugo 已经内置了 Disqus 的模版，开启 Disqus 相当简单。 参考官方文档： https://gohugo.io/content-management/comments/ 首先需要注册一个 Disqus 帐号，官网是 https://disqus.com/ 然后创建一个站点，站点名称可以随意，这个名字稍后要用到</description></item><item><title>在 iOS 里使用 Flexbox 布局</title><link>/2019/12/08/%E5%9C%A8-ios-%E9%87%8C%E4%BD%BF%E7%94%A8-flexbox-%E5%B8%83%E5%B1%80/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/08/%E5%9C%A8-ios-%E9%87%8C%E4%BD%BF%E7%94%A8-flexbox-%E5%B8%83%E5%B1%80/</guid><description>iOS 目前只有手动布局和自动布局两种方式，flexbox 布局只能引入第三方库进行支持 这个布局的思想是来自 CSS 里的 flexbox，关于 CSS Flexbox 可以参考这</description></item><item><title>在 Hugo 的 Markdown 里直接使用 HTML</title><link>/2019/12/05/%E5%9C%A8-hugo-%E7%9A%84-markdown-%E9%87%8C%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8-html/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/05/%E5%9C%A8-hugo-%E7%9A%84-markdown-%E9%87%8C%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8-html/</guid><description>hugo 在处理 Markdown 文档的时候会忽略里面的 HTML 代码，如果想在 Markdown 里嵌入 HTML 代码，可以使用 hugo 的 shortcode 来实现。 在 layouts/shortcodes 里新建一个 raw.html 文件，如果路径不存在可以用命令 mkdir -p layouts/shortcodes 创</description></item><item><title>在 swift 里扩展 UIColor 使用十六进制颜色值</title><link>/2019/12/05/%E5%9C%A8-swift-%E9%87%8C%E6%89%A9%E5%B1%95-uicolor-%E4%BD%BF%E7%94%A8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/05/%E5%9C%A8-swift-%E9%87%8C%E6%89%A9%E5%B1%95-uicolor-%E4%BD%BF%E7%94%A8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC/</guid><description>4.2. The RGB hexadecimal notations: #RRGGBB 十六进制颜色表示方式是 #RRGGBB（6位），带 alpha 的表示方式是 #RRGGBBAA（8位） 取值范围是 00 - FF。 十六进制颜色缩写的表</description></item><item><title>了解 Image 的 capInsets 和 resizingMode</title><link>/2019/12/04/%E4%BA%86%E8%A7%A3-image-%E7%9A%84-capinsets-%E5%92%8C-resizingmode/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/04/%E4%BA%86%E8%A7%A3-image-%E7%9A%84-capinsets-%E5%92%8C-resizingmode/</guid><description>拉伸 UIImage 的时候使用的方法是 resizableImage，它的声明如下： func resizableImage( withCapInsets capInsets: UIEdgeInsets, resizingMode: UIImage.ResizingMode ) -&amp;gt; UIImage capInsets 指定要保护的区域，就是图像的四个角落，如果大小是 0</description></item><item><title>视网膜屏幕下像素对齐计算方法</title><link>/2019/12/03/%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E4%B8%8B%E5%83%8F%E7%B4%A0%E5%AF%B9%E9%BD%90%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/03/%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E4%B8%8B%E5%83%8F%E7%B4%A0%E5%AF%B9%E9%BD%90%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</guid><description>使用 CoreGraphics 裁剪图片的时候如果计算后的尺寸没有像素对齐，绘制的图像就会有 1px 的透明边框。 像素对齐的算法： 例如需要计算 0.5pt 的高度在当前屏幕下需要多少 px</description></item><item><title>在 netlify 使用最新版本的 hugo 和 go 构建网站</title><link>/2019/11/29/%E5%9C%A8-netlify-%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84-hugo-%E5%92%8C-go-%E6%9E%84%E5%BB%BA%E7%BD%91%E7%AB%99/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/29/%E5%9C%A8-netlify-%E4%BD%BF%E7%94%A8%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84-hugo-%E5%92%8C-go-%E6%9E%84%E5%BB%BA%E7%BD%91%E7%AB%99/</guid><description>如果你使用 hugo 构建网站，那么一定知道 hugo 最近新发布了 v0.60 版本 hugo v0.60 开始，更换了默认的 markdown 渲染内核，使用更快的 goldmark。 默认设置下 netlify 使用的是保守</description></item><item><title>制作一个极速 Hugo 主题</title><link>/2019/11/24/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%9E%81%E9%80%9F-hugo-%E4%B8%BB%E9%A2%98/</link><pubDate>Sun, 24 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/24/%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E6%9E%81%E9%80%9F-hugo-%E4%B8%BB%E9%A2%98/</guid><description>Hugo 是一个静态网站生成工具，具有生成速度很快、简单易学的特点。 官网是 https://gohugo.io 官网已经提供了丰富的主题，但我依然选择自己制作一款主题自己使用。 主要是自</description></item><item><title>Git 操作技巧</title><link>/2019/11/20/git-%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</link><pubDate>Wed, 20 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/20/git-%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/</guid><description>删除远程仓库所有 tag git push origin --delete $(git tag -l) 执行后将删除远程仓库的所有 tag。 不过，本地已经拉取回来的 tag 还在。 创建一个没有任何提交记录的分支 git checkout --orphan branche-name</description></item><item><title>在 iOS 里 100% 还原 Sketch 实现的阴影效果</title><link>/2019/11/19/%E5%9C%A8-ios-%E9%87%8C-100-%E8%BF%98%E5%8E%9F-sketch-%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/19/%E5%9C%A8-ios-%E9%87%8C-100-%E8%BF%98%E5%8E%9F-sketch-%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</guid><description>还原不了设计师视觉稿的开发者不是一个合格的页面仔。 Sketch 是 APP 设计的神器，大部分设计师都选择它作为 APP 界面的设计工具。 在 Sketch 里设置一个阴影，效果图和参</description></item><item><title>给 Xcode 添加最新的 iOS DeviceSupport</title><link>/2019/11/18/%E7%BB%99-xcode-%E6%B7%BB%E5%8A%A0%E6%9C%80%E6%96%B0%E7%9A%84-ios-devicesupport/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/18/%E7%BB%99-xcode-%E6%B7%BB%E5%8A%A0%E6%9C%80%E6%96%B0%E7%9A%84-ios-devicesupport/</guid><description>默认情况下 Xcode 只能调试其内置对应的 iOS 版本，如果发布了新的 iOS 版本而没有更新到与之对应的新版本 Xcode，就不能进行调试了。 要解决这个问题， 需要在</description></item><item><title>swift 里正确的实现一个 NSTextStorage 子类</title><link>/2019/11/11/swift-%E9%87%8C%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-nstextstorage-%E5%AD%90%E7%B1%BB/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/11/swift-%E9%87%8C%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-nstextstorage-%E5%AD%90%E7%B1%BB/</guid><description>即使你按照官方的文档来操作依然有可能会掉进坑里，因为 swift 的实现和 objc 稍有不同。 NSTextStorage 是基于 NSMutableAttributedString 的一个虚基类。 这意味着当你写一个 NSTextStorage 的子类时，必须正确实现</description></item><item><title>免费的国内 git 代码托管服务</title><link>/2019/11/07/%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BD%E5%86%85-git-%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/07/%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BD%E5%86%85-git-%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1/</guid><description>码云 官网： https://gitee.com 功能最为丰富，Pages 需要付费才能使用自定义域名和 https Coding 官网： https://coding.net 已被腾讯收购，Pages 功能免费提供自定义域名和 https 阿里云 官网： https://code.aliyun.com</description></item><item><title>iOS 13 下访问受限制的 _ivar</title><link>/2019/06/09/ios-13-%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-_ivar/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0800</pubDate><guid>/2019/06/09/ios-13-%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-_ivar/</guid><description>在 iOS 13 之前，一般是使用 KVC 来实现访问私有的实例变量，比如要访问 UITextField 的 _placeholderLabel 一般会这么做： extension UITextField { var placeholderLabel: UILabel? { get { return value(forKey: &amp;#34;_placeholderLabel&amp;#34;) as? UILabel } } } 一直到 iOS 12，这个方法运行</description></item><item><title>模仿微信适配 iPad 的布局方式</title><link>/2019/05/08/%E6%A8%A1%E4%BB%BF%E5%BE%AE%E4%BF%A1%E9%80%82%E9%85%8D-ipad-%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate><guid>/2019/05/08/%E6%A8%A1%E4%BB%BF%E5%BE%AE%E4%BF%A1%E9%80%82%E9%85%8D-ipad-%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</guid><description>微信在 iPad 上竖屏时显示的样式和手机版一样，横屏的显示为分隔视图。 UIKit 里可以实现这样的效果的组件是UISplitViewController。 接下</description></item><item><title>Fix Reveal load error in iOS 12 (jailbreaked)</title><link>/2019/05/02/fix-reveal-load-error-in-ios-12-jailbreaked/</link><pubDate>Thu, 02 May 2019 00:00:00 +0800</pubDate><guid>/2019/05/02/fix-reveal-load-error-in-ios-12-jailbreaked/</guid><description>After install CCRevealLoader, RevealServer.framework installed at /Library/Application Support/CCRevealLoader/RevealServer.framework
file system sandbox blocked mmap When loading Reveal server
a solution: move RevealServer.framework to /Library/TweakInject/
mv &amp;#34;/Library/Application Support/CCRevealLoader/RevealServer.framework&amp;#34; /Library/TweakInject/ ln -s /Library/TweakInject/RevealServer.framework /Library/Application\ Support/CCRevealLoader/ That`s OK now.</description></item><item><title>rsshub with TLS</title><link>/2019/05/01/rsshub-with-tls/</link><pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate><guid>/2019/05/01/rsshub-with-tls/</guid><description>Deploy rsshub rsshub server listen 127.0.0.1:1200
docker-compose.yml
version:&amp;#39;3&amp;#39;services:rsshub:image:&amp;#39;diygod/rsshub&amp;#39;Deploy nginx docker-compose.yml
version:&amp;#39;3&amp;#39;services:nginx:image:&amp;#39;cntrump/ubuntu_nginx_boringssl&amp;#39;volumes:- /opt/nginx/etc:/etc/nginx- /opt/nginx/log:/var/log/nginx- /opt/nginx/cache:/var/cache/nginx- /opt/www:/var/wwwports:- &amp;#39;80:80&amp;#39;- &amp;#39;443:443&amp;#39;command:/usr/sbin/nginx-g&amp;#34;daemon off;&amp;#34;Reverse proxy, using http 1.1 with tls 1.2/1.3
nginx.conf
{ ... # HTTPS server server { listen 443 ssl; server_name localhost; ssl_protocols TLSv1.2 TLSv1.3; ssl_certificate /etc/nginx/certs/fullchain.pem; ssl_certificate_key /etc/nginx/certs/privkey.pem; location / { proxy_redirect off; proxy_pass http://rsshub:1200; # rsshub is service name which defined in docker-compose.yml proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; proxy_set_header Host $http_host; # Show realip in v2ray access.</description></item><item><title>在 iOS 中使用 icofont 字体</title><link>/2019/04/30/%E5%9C%A8-ios-%E4%B8%AD%E4%BD%BF%E7%94%A8-icofont-%E5%AD%97%E4%BD%93/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0800</pubDate><guid>/2019/04/30/%E5%9C%A8-ios-%E4%B8%AD%E4%BD%BF%E7%94%A8-icofont-%E5%AD%97%E4%BD%93/</guid><description>获取 icofont 可以在 icofont.com 下载到 icofont.ttf，里面包含了很多图标。 把下载回来的 icofont.ttf 拖到项目里，或者新建一个 fonts.bundle 用来放字体资源。 在 APP 启动的时候注册字</description></item><item><title>在 ObjC 项目里使用 Swift 静态库</title><link>/2019/03/29/%E5%9C%A8-objc-%E9%A1%B9%E7%9B%AE%E9%87%8C%E4%BD%BF%E7%94%A8-swift-%E9%9D%99%E6%80%81%E5%BA%93/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/29/%E5%9C%A8-objc-%E9%A1%B9%E7%9B%AE%E9%87%8C%E4%BD%BF%E7%94%A8-swift-%E9%9D%99%E6%80%81%E5%BA%93/</guid><description>Xcode 9 开始 Swift 支持编译生成静态类型的 framework 如果给之前的 ObjC 项目直接添加 Swift 写的 framework，在编译的时候会报错，错误信息是无法找到 Swift 的方法。 解决方</description></item><item><title>git with GPG sign</title><link>/2019/03/25/git-with-gpg-sign/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/25/git-with-gpg-sign/</guid><description>Setup GPG pub key for git server Install GPG Suite or gpgosx on macOS Create a GPG key Setup GPG pub key for github or gitlab etc. Setup GPG key for git client List all GPG key gpg -K Setup signingkey for git git config user.signingkey your-key Enable gpgsign for git commit git config commit.gpgsign true using gpg2
git config --global gpg.program $(which gpg2)</description></item><item><title>GNU auto tools</title><link>/2019/03/25/gnu-auto-tools/</link><pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/25/gnu-auto-tools/</guid><description>The GNU Autotools:
Autoconf Automake Libtool (Xcode built-in) Gettext</description></item><item><title>Make carthage portable</title><link>/2019/03/23/make-carthage-portable/</link><pubDate>Sat, 23 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/23/make-carthage-portable/</guid><description>I wanna run carthage without install CarthageKit.framework to system library.
Download latest release get latest carthage pkg form https://github.com/Carthage/Carthage/releases
Extract pkg file pkgutil --expand-full Carthage.pkg Carthage Copy to system path cp Carthage/CarthageApp.pkg/Payload/usr/local/bin/carthage /usr/local/bin mkdir -p /usr/local/Library/Frameworks cp -r Carthage/CarthageApp.pkg/Payload/Library/Frameworks/CarthageKit.framework /usr/local/Library/Frameworks Add rpath for carthage install_name_tool -add_rpath @executable_path/../Library/Frameworks /usr/local/bin/carthage install_name_tool -add_rpath @executable_path/../Library/Frameworks/CarthageKit.framework/Versions/Current/Frameworks /usr/local/bin/carthage All done.
I using a shell script make it easy
#!/bin/bash set -e if [ ! -f Carthage.</description></item><item><title>fatal: cannot run gpg: No such file or directory</title><link>/2019/03/22/fatal-cannot-run-gpg-no-such-file-or-directory/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/22/fatal-cannot-run-gpg-no-such-file-or-directory/</guid><description>After installed GPG Site: https://gpgtools.org/
Git commit with error:
fatal: cannot run gpg: No such file or directory error: gpg failed to sign the data fatal: failed to write commit object Solution:
git config --global gpg.program $(which gpg) About Signing commits</description></item><item><title>Using xcrun</title><link>/2019/03/22/using-xcrun/</link><pubDate>Fri, 22 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/22/using-xcrun/</guid><description>Run a command with special toolchain # using clang of toolchain org.llvm.8.0.0 xcrun --toolchain org.llvm.8.0.0 clang -v output
clang version 8.0.0 Target: x86_64-apple-darwin18.2.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/LLVM8.0.0.xctoolchain/usr/bin Show SDK path xcrun --show-sdk-path --sdk iphoneos /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS12.1.sdk xcrun --show-sdk-path --sdk iphonesimulator /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator12.1.sdk xcrun --show-sdk-path --sdk macosx /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk</description></item><item><title>build LLVM 8 on macOS</title><link>/2019/03/21/build-llvm-8-on-macos/</link><pubDate>Thu, 21 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/21/build-llvm-8-on-macos/</guid><description>TL;DR
download my pre-built:
LLVM8.0.1.xctoolchain.7z
MD5: 32241cb3e093b15c58bd40200dc2fd76
LLVM8.0.0.xctoolchain.7z
MD5: 169fd4d3fdffa5a136cbe77aac759cdc
prepare building lldb Install editline Install pcre &amp;amp;&amp;amp; swig Read code-signing.txt building clone llvm-project checkout 8.0 branch cd llvm run build-llvm.sh build-llvm.sh
#!/bin/bash set -e mkdir build &amp;amp;&amp;amp; cd build output=/tmp/llvm-build cmake -DCMAKE_INSTALL_PREFIX=${output} \ -DCMAKE_BUILD_TYPE=Release \ -DLLVM_INCLUDE_TESTS=OFF \ -DLLVM_INCLUDE_EXAMPLES=OFF \ -DLLDB_CODESIGN_IDENTITY=&amp;#39;&amp;#39; \ -DLLDB_BUILD_FRAMEWORK=ON \ -DLLVM_ENABLE_PROJECTS=&amp;#34;all&amp;#34; \ -DLLVM_CREATE_XCODE_TOOLCHAIN=ON \ -DCMAKE_OSX_DEPLOYMENT_TARGET=10.</description></item><item><title>A simple Dispatch Queue Pool</title><link>/2019/03/18/a-simple-dispatch-queue-pool/</link><pubDate>Mon, 18 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/18/a-simple-dispatch-queue-pool/</guid><description>I named it MDispatchQueuePool.
Really easy to use:
[MDispatchQueuePool.sharedPool asyncExecute:^{ // put your code here ... }]; Here is MDispatchQueuePool.m
@interface MDispatchQueuePool () { dispatch_queue_t _executionQueue; dispatch_queue_t _waitingQueue; dispatch_semaphore_t _maximumQueueSemaphore; } @end @implementation MDispatchQueuePool + (instancetype)sharedPool { static MDispatchQueuePool *pool = nil; static dispatch_once_t onceToken = 0; dispatch_once(&amp;amp;onceToken, ^{ pool = [[self alloc] init]; }); return pool; } - (instancetype)init { if (self = [super init]) { _executionQueue = dispatch_queue_create(&amp;#34;queue.exec.MDispatchQueuePool&amp;#34;, DISPATCH_QUEUE_CONCURRENT); _waitingQueue = dispatch_queue_create(&amp;#34;queue.</description></item><item><title>Build LLVM for macOS</title><link>/2019/03/13/build-llvm-for-macos/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/13/build-llvm-for-macos/</guid><description>Build LLVM We build a toolchain for Xcode, and include these projects: clang clang-tools-extra libcxx libcxxabi compiler-rt libunwind polly lld clone llvm project, and build the 7.0.1 version git clone https://github.com/llvm/llvm-project.git llvm-project cd llvm-project/llvm git checkout llvmorg-7.0.1 mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; build_llvm.sh Build obfuscator-LLVM obfuscator-LLVM upon LLVM, so We must clone LLVM project first. We build heroims&amp;rsquo; fork, because his fork is newer. cd llvm-project git clone https://github.com/heroims/obfuscator.git</description></item><item><title>Build boringssl for iOS</title><link>/2019/02/16/build-boringssl-for-ios/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0800</pubDate><guid>/2019/02/16/build-boringssl-for-ios/</guid><description>Clone boringssl git clone https://github.com/google/boringssl.git boringssl Build boringssl cd boringssl mkdir build &amp;amp;&amp;amp; cd build ./build.ios build.ios is my build script
#!/bin/bash set -e export IPHONEOS_DEPLOYMENT_TARGET=&amp;#34;9.0&amp;#34; # for -miphoneos-version-min arch=arm64 mkdir ${arch} &amp;amp;&amp;amp; cd ${arch} cmake -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=${arch} -GNinja ../.. ninja cd .. arch=armv7 mkdir ${arch} &amp;amp;&amp;amp; cd ${arch} cmake -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=${arch} -GNinja ../.. ninja cd .. arch=x86_64 mkdir ${arch} &amp;amp;&amp;amp; cd ${arch} cmake -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=${arch} -GNinja ../.. ninja cd .</description></item><item><title>Build extern version of hugo</title><link>/2019/02/15/build-extern-version-of-hugo/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0800</pubDate><guid>/2019/02/15/build-extern-version-of-hugo/</guid><description>Official hugo do&amp;rsquo;nt support scss
Build extern version of hugo from source git clone https://github.com/gohugoio/hugo.git hugo cd hugo go install --tags extended Copy hugo to system path sudo cp ~/go/bin/hugo /usr/bin Check hugo version infomation hugo version Hugo Static Site Generator v0.55.0-DEV/extended darwin/amd64 BuildDate: unknown</description></item><item><title>nginx with boringssl</title><link>/2019/01/27/nginx-with-boringssl/</link><pubDate>Sun, 27 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/27/nginx-with-boringssl/</guid><description>build with boringssl enable TLS 1.3 enable 0-RTT Install &amp;amp; Run mount log dir to /opt/nginx/log config dir to /opt/nginx/etc web root to /opt/www docker pull cntrump/ubuntu_nginx_boringssl docker run -v /opt/nginx/etc:/etc/nginx -v /opt/nginx/log:/var/log/nginx -v /opt/www:/var/www -v /opt/nginx/cache:/var/cache/nginx -p 80:80 -p 443:443 -d cntrump/ubuntu_nginx_boringssl /usr/sbin/nginx -g &amp;#34;daemon off;&amp;#34; Using docker-compose docker-compose.yml
version:&amp;#39;3&amp;#39;services:nginx:image:&amp;#39;cntrump/ubuntu_nginx_boringssl&amp;#39;volumes:- /opt/nginx/etc:/etc/nginx- /opt/nginx/log:/var/log/nginx- /opt/nginx/cache:/var/cache/nginx- /opt/www:/var/wwwports:- &amp;#39;80:80&amp;#39;- &amp;#39;443:443&amp;#39;command:/usr/sbin/nginx-g&amp;#34;daemon off;&amp;#34;deploy:restart_policy:condition:on-failuredelay:5smax_attempts:3window:120sdocker-compose start/stop/restart nginx Example nginx.conf A+ configuration for https://myssl.com</description></item><item><title>Build nginx with boringssl on Ubuntu 18.04</title><link>/2019/01/24/build-nginx-with-boringssl-on-ubuntu-18.04/</link><pubDate>Thu, 24 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/24/build-nginx-with-boringssl-on-ubuntu-18.04/</guid><description>Enable TLS 1.3 support Using official confiuration Using shell script #!/bin/sh set -e apt-get install build-essential curl git cmake ninja-build golang libpcre3-dev zlib1g-dev # build boringssl git clone --depth=1 https://github.com/google/boringssl.git cd boringssl mkdir build cd build cmake -GNinja .. ninja cd ../.. mkdir -p boringssl/.openssl/lib cp boringssl/build/crypto/libcrypto.a boringssl/build/ssl/libssl.a boringssl/.openssl/lib cd boringssl/.openssl ln -s ../include . cd ../.. # build nginx nginx_ver=1.15.8 curl -O https://nginx.org/download/nginx-${nginx_ver}.tar.gz tar zxvf nginx-${nginx_ver}.tar.gz cd nginx-${nginx_ver} .</description></item><item><title>Install newest nginx on ubuntu 18.04</title><link>/2019/01/17/install-newest-nginx-on-ubuntu-18.04/</link><pubDate>Thu, 17 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/17/install-newest-nginx-on-ubuntu-18.04/</guid><description>Install nginx_signing.key cd /etc/apt curl -O https://nginx.org/keys/nginx_signing.key apt-key add nginx_signing.key Update apt source vim /etc/apt/sources.list deb http://nginx.org/packages/ubuntu/ bionic nginx deb-src http://nginx.org/packages/ubuntu/ bionic nginx apt-get update apt-get install nginx</description></item><item><title>Setup flutter for iOS without homebrew on macOS</title><link>/2019/01/15/setup-flutter-for-ios-without-homebrew-on-macos/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/15/setup-flutter-for-ios-without-homebrew-on-macos/</guid><description>requirements: macports
Install cocoapods sudo gem install cocoapods Deploy to iOS devices sudo port install usbmuxd libimobiledevice ideviceinstaller ios-deploy pod setup Get the Flutter SDK current stale version: 1.0.0 flutter_macos_v1.0.0-stable.zip
unzip flutter_macos_v1.0.0-stable.zip Add the flutter tool to your path:
export PATH=$PATH:`pwd`/flutter/bin</description></item><item><title>Install Chisel for Xcode without brew</title><link>/2019/01/14/install-chisel-for-xcode-without-brew/</link><pubDate>Mon, 14 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/14/install-chisel-for-xcode-without-brew/</guid><description>Clone Chisel git clone https://github.com/facebook/chisel.git chisel Build and install chisel.framework cd chisel/Chisel sudo make install Setup chisel commands vim ~/.lldbinit # ~/.lldbinit command script import /your/repo/chisel/fblldb.py script fblldb.loadCommandsInDirectory(&amp;#39;/your/repo/chisel/commands&amp;#39;)</description></item><item><title>Get free SSL/TLS Certificates from Let's Encrypt</title><link>/2019/01/13/get-free-ssl/tls-certificates-from-lets-encrypt/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0800</pubDate><guid>/2019/01/13/get-free-ssl/tls-certificates-from-lets-encrypt/</guid><description>My platform: macOS + macports
Install certbot sudo port install certbot Write a shell script make_cert.sh
#!/bin/sh set -e sudo certbot --duplicate certonly -d &amp;#34;*.$1&amp;#34; -d &amp;#34;$1&amp;#34; --manual --preferred-challenges dns-01 --server https://acme-v02.api.letsencrypt.org/directory Usage make_cert.sh domain.com Configure nginx Copy all certs to /etc/nginx/cert
On Ubuntu
vim /etc/nginx/sites-available/default Enable ssl configuration
ssl on; ssl_certificate /etc/nginx/cert/fullchain.pem; ssl_certificate_key /etc/nginx/cert/privkey.pem;</description></item><item><title>Change toolchain for Xcode</title><link>/2018/12/20/change-toolchain-for-xcode/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0800</pubDate><guid>/2018/12/20/change-toolchain-for-xcode/</guid><description>Change toolchain for Xcode something about Xcode toolchian:
Default toolchain location is /Applications/Xcode.app/Contents/Developer/Toolchains Extension of xcode toolchain bundle is .xctoolchain Display name and identifier of toolchain is defined in .xctoolchain/ToolchainInfo.plist CFBundleIdentifier : toolchain bundle identifier DisplayName : name displayed in Xcode menu All binaries, headers, libs etc in .xctoolchain/usr From menu Xcode - Toolchains to switch toolchians If you want install toolchain out of Xcode, the location is /Library/Developer/Toolchains If your toolchain is installed in /Library/Developer/Toolchains, must add CompatibilityVersion key to ToolchainInfo.</description></item><item><title>Calc NSAttributedString size correctly with NSLayoutManager</title><link>/2018/12/16/calc-nsattributedstring-size-correctly-with-nslayoutmanager/</link><pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate><guid>/2018/12/16/calc-nsattributedstring-size-correctly-with-nslayoutmanager/</guid><description>Some code like this:
NSAttributedString *attrString = [[NSAttributedString alloc] initWithString:@&amp;#34;lvv&amp;#34; attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:30]}]; NSTextStorage *textStorage = [[NSTextStorage alloc] initWithAttributedString:attrString]; NSLayoutManager *layoutManager = [[NSLayoutManager alloc] init]; [textStorage addLayoutManager:layoutManager]; NSTextContainer *textContainer = [[NSTextContainer alloc] initWithSize:CGSizeMake(INFINITY, INFINITY)]; [layoutManager addTextContainer:textContainer]; CGRect usedRect = [layoutManager usedRectForTextContainer:textContainer]; NSLog(@&amp;#34;usedRect:%@&amp;#34;, NSStringFromCGRect(usedRect)); result is CGRectZero:
usedRect:{{0, 0}, {0, 0}} Why?
Because glyph generation, layout and font fallback not have happened yet.
Just adjust code simply:
NSAttributedString *attrString = [[NSAttributedString alloc] initWithString:@&amp;#34;lvv&amp;#34; attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:30]}]; NSLayoutManager *layoutManager = [[NSLayoutManager alloc] init]; NSTextContainer *textContainer = [[NSTextContainer alloc] initWithSize:CGSizeMake(INFINITY, INFINITY)]; [layoutManager addTextContainer:textContainer]; // add layout at the last NSTextStorage *textStorage = [[NSTextStorage alloc] init]; [textStorage addLayoutManager:layoutManager]; // set string after add layout [textStorage setAttributedString:attrString]; CGRect usedRect = [layoutManager usedRectForTextContainer:textContainer]; NSLog(@&amp;#34;usedRect:%@&amp;#34;, NSStringFromCGRect(usedRect)); the result is correct:</description></item><item><title>Debug WebKit with Xcode on iOS simulator</title><link>/2018/12/15/debug-webkit-with-xcode-on-ios-simulator/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0800</pubDate><guid>/2018/12/15/debug-webkit-with-xcode-on-ios-simulator/</guid><description>Debug WebKit with Xcode on iOS simulator Build WebKit git clone git://git.webkit.org/WebKit.git WebKit cd WebKit sudo Tools/Scripts/configure-xcode-for-ios-development Tools/Scripts/build-webkit --debug --ios-simulator It will take 1 hour.
Configure WebKit.xcworkspace open WebKit.xcworkspace with Xcode File - Workspace Settings Advanced … Custom - Relative to Workspace Products: WebKitBuild Intermediates: WebKitBuild Done Configure MobileMiniBrowser open MobileMiniBrowser project in WebKit.xcworkspace change TARGETS (both MobileMiniBrowser and MobileMiniBrowser.framework) Build Settings - Base SDK: iOS change Architectures: Standard architectures (optional) Edit Info.</description></item></channel></rss>
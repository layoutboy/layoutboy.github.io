<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iOS on &amp;#xF8FF;页面仔的笔记</title><link>/tags/ios/</link><description>Recent content in iOS on &amp;#xF8FF;页面仔的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2020 LayoutBoy.</copyright><lastBuildDate>Sun, 02 Feb 2020 12:07:59 +0800</lastBuildDate><atom:link href="/tags/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>解决适配 iOS13 后 UIMenuController 不能正常弹出的问题</title><link>/posts/2020/02/02_ios13_keywindow/</link><pubDate>Sun, 02 Feb 2020 12:07:59 +0800</pubDate><guid>/posts/2020/02/02_ios13_keywindow/</guid><description>&lt;p>在 iOS13 以前，大家的 Window 都是在 &lt;code>AppDelegate&lt;/code> 里进行初始化：&lt;/p></description></item><item><title>macOS 上下载 iOS APP 安装包</title><link>/posts/2020/01/15_down_app_ipa/</link><pubDate>Wed, 15 Jan 2020 17:09:33 +0800</pubDate><guid>/posts/2020/01/15_down_app_ipa/</guid><description>使用的工具是 App Configurator 2 先把手机连接上电脑，然后在手机上安装一次 APP。 再使用「添加APP」功能在已购列表里选择需要下载的APP，比如微信： 正在下</description></item><item><title>iOS 无卡顿同时使用圆角、阴影和边框</title><link>/posts/2020/01/11_smooth_scroll/</link><pubDate>Sat, 11 Jan 2020 18:13:01 +0800</pubDate><guid>/posts/2020/01/11_smooth_scroll/</guid><description>在 iOS 开发中，最怕看到设计稿里圆角、阴影和边框同时出现，这三兄弟简直就是性能杀手。 优化的方法百度一下有很多，虽然方法不同但是原理都一样。 分享一</description></item><item><title>checkra1n 越狱后连接 SSH</title><link>/posts/2019/12/28_ssh_checkra1n/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/28_ssh_checkra1n/</guid><description>checkra1n是利用硬件漏洞越狱的工具，与操作系统版本无关。 支持的设备是 iPhone 5s – iPhone X，iOS 12.3+ 越狱成功后默认已经运行了 SSH 服务，端口号是 44</description></item><item><title>在越狱后的 iOS 上更新 Lookin 链接库</title><link>/posts/2019/12/27_update_lookin_on_jb_ios/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/27_update_lookin_on_jb_ios/</guid><description>Lookin 是免费的 iOS App UI 分析工具，还具有简单的动态调试功能。 越狱后如果要对第三方 App 进行界面分析，需要安装 LookinLoader 插件。 这个插件加载 LookinServer.framework 的路径是 /usr/li</description></item><item><title>iOS 格式化浮点数时去掉末尾的 0</title><link>/posts/2019/12/16_float_short/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/16_float_short/</guid><description>有时候需要把浮点数格式化为字符串显示到界面上，需要去掉末尾多余的 0。 例如 108 * 0.95 希望界面上显示的结果为 102.6 而不是 102.600000 很简单，使用下面的方式进行格式</description></item><item><title>运用 AutoLayout 的优先级例子</title><link>/posts/2019/12/14_ios_autolayout_priority/</link><pubDate>Sat, 14 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/14_ios_autolayout_priority/</guid><description>当约束条件发生冲突时，系统会使用用优先级高的约束。 还可以通过设置约束为 deactive 状态来使约束不生效。 利用好约束的优先级，可以使布局代码简洁、逻辑清晰</description></item><item><title>在 iOS 里使用 Flexbox 布局</title><link>/posts/2019/12/08_ios_flexlayout/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/08_ios_flexlayout/</guid><description>iOS 目前只有手动布局和自动布局两种方式，flexbox 布局只能引入第三方库进行支持 这个布局的思想是来自 CSS 里的 flexbox，关于 CSS Flexbox 可以参考这</description></item><item><title>在 swift 里扩展 UIColor 使用十六进制颜色值</title><link>/posts/2019/12/05_hexcolor_alpha/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/05_hexcolor_alpha/</guid><description>4.2. The RGB hexadecimal notations: #RRGGBB 十六进制颜色表示方式是 #RRGGBB（6位），带 alpha 的表示方式是 #RRGGBBAA（8位） 取值范围是 00 - FF。 十六进制颜色缩写的表</description></item><item><title>了解 Image 的 capInsets 和 resizingMode</title><link>/posts/2019/12/04_image_resizingmode/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/04_image_resizingmode/</guid><description>拉伸 UIImage 的时候使用的方法是 resizableImage，它的声明如下： func resizableImage( withCapInsets capInsets: UIEdgeInsets, resizingMode: UIImage.ResizingMode ) -&amp;gt; UIImage capInsets 指定要保护的区域，就是图像的四个角落，如果大小是 0</description></item><item><title>视网膜屏幕下像素对齐计算方法</title><link>/posts/2019/12/03_pix_aligned/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0800</pubDate><guid>/posts/2019/12/03_pix_aligned/</guid><description>使用 CoreGraphics 裁剪图片的时候如果计算后的尺寸没有像素对齐，绘制的图像就会有 1px 的透明边框。 像素对齐的算法： 例如需要计算 0.5pt 的高度在当前屏幕下需要多少 px</description></item><item><title>在 iOS 里 100% 还原 Sketch 实现的阴影效果</title><link>/posts/2019/11/19_ios_sketch_shadow/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate><guid>/posts/2019/11/19_ios_sketch_shadow/</guid><description>还原不了设计师视觉稿的开发者不是一个合格的页面仔。 Sketch 是 APP 设计的神器，大部分设计师都选择它作为 APP 界面的设计工具。 在 Sketch 里设置一个阴影，效果图和参</description></item><item><title>给 Xcode 添加最新的 iOS DeviceSupport</title><link>/posts/2019/11/18_iosdevicesupport/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0800</pubDate><guid>/posts/2019/11/18_iosdevicesupport/</guid><description>默认情况下 Xcode 只能调试其内置对应的 iOS 版本，如果发布了新的 iOS 版本而没有更新到与之对应的新版本 Xcode，就不能进行调试了。 要解决这个问题， 需要在</description></item><item><title>swift 里正确的实现一个 NSTextStorage 子类</title><link>/posts/2019/11/11_swift_subclass_nstextstorage/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate><guid>/posts/2019/11/11_swift_subclass_nstextstorage/</guid><description>即使你按照官方的文档来操作依然有可能会掉进坑里，因为 swift 的实现和 objc 稍有不同。 NSTextStorage 是基于 NSMutableAttributedString 的一个虚基类。 这意味着当你写一个 NSTextStorage 的子类时，必须正确实现</description></item><item><title>iOS 13 下访问受限制的 _ivar</title><link>/posts/2019/06/09-ios13-ivar-kvc-appbug/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0800</pubDate><guid>/posts/2019/06/09-ios13-ivar-kvc-appbug/</guid><description>在 iOS 13 之前，一般是使用 KVC 来实现访问私有的实例变量，比如要访问 UITextField 的 _placeholderLabel 一般会这么做： extension UITextField { var placeholderLabel: UILabel? { get { return value(forKey: &amp;#34;_placeholderLabel&amp;#34;) as? UILabel } } } 一直到 iOS 12，这个方法运行</description></item><item><title>模仿微信适配 iPad 的布局方式</title><link>/posts/2019/05/08_wechat_style_splitviewcontroller/</link><pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate><guid>/posts/2019/05/08_wechat_style_splitviewcontroller/</guid><description>微信在 iPad 上竖屏时显示的样式和手机版一样，横屏的显示为分隔视图。 UIKit 里可以实现这样的效果的组件是UISplitViewController。 接下</description></item><item><title>在 iOS 中使用 icofont 字体</title><link>/posts/2019/04/30_using_icofont/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0800</pubDate><guid>/posts/2019/04/30_using_icofont/</guid><description>获取 icofont 可以在 icofont.com 下载到 icofont.ttf，里面包含了很多图标。 把下载回来的 icofont.ttf 拖到项目里，或者新建一个 fonts.bundle 用来放字体资源。 在 APP 启动的时候注册字</description></item><item><title>在 ObjC 项目里使用 Swift 静态库</title><link>/posts/2019/03/29_using_static_swift_in_objc/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0800</pubDate><guid>/posts/2019/03/29_using_static_swift_in_objc/</guid><description>Xcode 9 开始 Swift 支持编译生成静态类型的 framework 如果给之前的 ObjC 项目直接添加 Swift 写的 framework，在编译的时候会报错，错误信息是无法找到 Swift 的方法。 解决方</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>iOS on 页面仔的笔记</title><link>/tags/ios/</link><description>Recent content in iOS on 页面仔的笔记</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>&amp;copy;2020 LayoutBoy.</copyright><lastBuildDate>Wed, 25 Mar 2020 13:28:09 +0800</lastBuildDate><atom:link href="/tags/ios/index.xml" rel="self" type="application/rss+xml"/><item><title>自定义 BlurEffect</title><link>/2020/03/25/%E8%87%AA%E5%AE%9A%E4%B9%89-blureffect/</link><pubDate>Wed, 25 Mar 2020 13:28:09 +0800</pubDate><guid>/2020/03/25/%E8%87%AA%E5%AE%9A%E4%B9%89-blureffect/</guid><description>系统提供的 UIBlurEffect 毛玻璃效果不能调整参数，只能选择内置的几个效果。 要实现自定义的毛玻璃效果，需要使用私有类 _UICustomBlurEffect，</description></item><item><title>搜索项目里的私有 API</title><link>/2020/03/06/%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84%E7%A7%81%E6%9C%89-api/</link><pubDate>Fri, 06 Mar 2020 01:56:33 +0800</pubDate><guid>/2020/03/06/%E6%90%9C%E7%B4%A2%E9%A1%B9%E7%9B%AE%E9%87%8C%E7%9A%84%E7%A7%81%E6%9C%89-api/</guid><description>&lt;p>最近提交新版本到 AppStore ，总是收到 &lt;code>ITMS-90809: Deprecated API Usage&lt;/code> 警告信息，说是项目里引用了即将废弃的 &lt;code>UIWebView&lt;/code>，建议全部替换为 &lt;code>WKWebView&lt;/code>。&lt;/p></description></item><item><title>禁用 iOS 自动检查下载系统更新</title><link>/2020/02/24/%E7%A6%81%E7%94%A8-ios-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%9F%A5%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</link><pubDate>Mon, 24 Feb 2020 00:43:26 +0800</pubDate><guid>/2020/02/24/%E7%A6%81%E7%94%A8-ios-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%9F%A5%E4%B8%8B%E8%BD%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</guid><description>iOS 总是会在接通电源并且连接 Wi-Fi 的情况下自动去检查和下载更新，在新系统发布的时候往往需要消耗几个 G 的流量。 对于开发者来说，开发需要测试不同的系统</description></item><item><title>Swift 创建纯代码的 macOS &amp; iOS 应用</title><link>/2020/02/22/swift-%E5%88%9B%E5%BB%BA%E7%BA%AF%E4%BB%A3%E7%A0%81%E7%9A%84-macos-ios-%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 22 Feb 2020 20:22:25 +0800</pubDate><guid>/2020/02/22/swift-%E5%88%9B%E5%BB%BA%E7%BA%AF%E4%BB%A3%E7%A0%81%E7%9A%84-macos-ios-%E5%BA%94%E7%94%A8/</guid><description>纯代码创建 macOS 应用 默认情况下使用 Xcode 创建的 macOS APP 是基于 storyboard 的，对于多人协作的项目，使用纯代码创建界面比 storyboard 更方便。 首先删掉 storyboard 和相关的设置 删除 Main.storyboard 和 Info.plist 里的</description></item><item><title>iOS 接入 IAP 指南</title><link>/2020/02/14/ios-%E6%8E%A5%E5%85%A5-iap-%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 14 Feb 2020 21:10:02 +0800</pubDate><guid>/2020/02/14/ios-%E6%8E%A5%E5%85%A5-iap-%E6%8C%87%E5%8D%97/</guid><description>&lt;p>如果 APP 里需要购买虚拟商品，只能通过苹果的 IAP，否则审核会被拒绝。&lt;/p>
&lt;p>接入 IAP 不复杂，只要遵守以下流程，就不会出现“掉单”的情况。&lt;/p></description></item><item><title>iOS13 使用系统里的第三方字体</title><link>/2020/02/09/ios13-%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%87%8C%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%97%E4%BD%93/</link><pubDate>Sun, 09 Feb 2020 12:29:14 +0800</pubDate><guid>/2020/02/09/ios13-%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%87%8C%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%AD%97%E4%BD%93/</guid><description>iOS13 支持安装自定义字体到系统里了，要想自己开发的 APP 能使用这些字体，需要做一些适配工作。 配置项目的 Capability 添加 Fonts 支持，勾选 Use Installed Fonts： 使用 UIFontPickerViewController UIFontPickerViewController 是 iOS13</description></item><item><title>iOS13 安装自定义字体</title><link>/2020/02/09/ios13-%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</link><pubDate>Sun, 09 Feb 2020 11:42:18 +0800</pubDate><guid>/2020/02/09/ios13-%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</guid><description>在 iOS13 之前，就可以通过奇技淫巧的方式安装自制字体，到了 iOS13 官方终于把这种方式合法化了。 介绍两款适配了 iOS13 自定义字体功能的 APP，看一下如何安装自定</description></item><item><title>iOS 显示模态 VC 时保持状态栏的风格不变</title><link>/2020/02/05/ios-%E6%98%BE%E7%A4%BA%E6%A8%A1%E6%80%81-vc-%E6%97%B6%E4%BF%9D%E6%8C%81%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B8%8D%E5%8F%98/</link><pubDate>Wed, 05 Feb 2020 16:46:29 +0800</pubDate><guid>/2020/02/05/ios-%E6%98%BE%E7%A4%BA%E6%A8%A1%E6%80%81-vc-%E6%97%B6%E4%BF%9D%E6%8C%81%E7%8A%B6%E6%80%81%E6%A0%8F%E7%9A%84%E9%A3%8E%E6%A0%BC%E4%B8%8D%E5%8F%98/</guid><description>&lt;p>系统的组件 &lt;code>UIAlertController&lt;/code> 在显示的时候，是不会改变状态栏的风格的。&lt;/p>
&lt;p>有时候我们的自定义组件也需要这样的效果。&lt;/p></description></item><item><title>解决适配 iOS13 后 UIMenuController 不能正常弹出的问题</title><link>/2020/02/02/%E8%A7%A3%E5%86%B3%E9%80%82%E9%85%8D-ios13-%E5%90%8E-uimenucontroller-%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%BC%B9%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 02 Feb 2020 12:07:59 +0800</pubDate><guid>/2020/02/02/%E8%A7%A3%E5%86%B3%E9%80%82%E9%85%8D-ios13-%E5%90%8E-uimenucontroller-%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%BC%B9%E5%87%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>&lt;p>在 iOS13 以前，大家的 Window 都是在 &lt;code>AppDelegate&lt;/code> 里进行初始化：&lt;/p></description></item><item><title>macOS 上下载 iOS APP 安装包</title><link>/2020/01/15/macos-%E4%B8%8A%E4%B8%8B%E8%BD%BD-ios-app-%E5%AE%89%E8%A3%85%E5%8C%85/</link><pubDate>Wed, 15 Jan 2020 17:09:33 +0800</pubDate><guid>/2020/01/15/macos-%E4%B8%8A%E4%B8%8B%E8%BD%BD-ios-app-%E5%AE%89%E8%A3%85%E5%8C%85/</guid><description>使用的工具是 App Configurator 2 先把手机连接上电脑，然后在手机上安装一次 APP。 再使用「添加APP」功能在已购列表里选择需要下载的APP，比如微信： 正在下</description></item><item><title>iOS 无卡顿同时使用圆角、阴影和边框</title><link>/2020/01/11/ios-%E6%97%A0%E5%8D%A1%E9%A1%BF%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9C%86%E8%A7%92%E9%98%B4%E5%BD%B1%E5%92%8C%E8%BE%B9%E6%A1%86/</link><pubDate>Sat, 11 Jan 2020 18:13:01 +0800</pubDate><guid>/2020/01/11/ios-%E6%97%A0%E5%8D%A1%E9%A1%BF%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E5%9C%86%E8%A7%92%E9%98%B4%E5%BD%B1%E5%92%8C%E8%BE%B9%E6%A1%86/</guid><description>在 iOS 开发中，最怕看到设计稿里圆角、阴影和边框同时出现，这三兄弟简直就是性能杀手。 优化的方法百度一下有很多，虽然方法不同但是原理都一样。 分享一</description></item><item><title>checkra1n 越狱后连接 SSH</title><link>/2019/12/28/checkra1n-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%BF%9E%E6%8E%A5-ssh/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/28/checkra1n-%E8%B6%8A%E7%8B%B1%E5%90%8E%E8%BF%9E%E6%8E%A5-ssh/</guid><description>checkra1n是利用硬件漏洞越狱的工具，与操作系统版本无关。 支持的设备是 iPhone 5s – iPhone X，iOS 12.3+ 越狱成功后默认已经运行了 SSH 服务，端口号是 44</description></item><item><title>在越狱后的 iOS 上更新 Lookin 链接库</title><link>/2019/12/27/%E5%9C%A8%E8%B6%8A%E7%8B%B1%E5%90%8E%E7%9A%84-ios-%E4%B8%8A%E6%9B%B4%E6%96%B0-lookin-%E9%93%BE%E6%8E%A5%E5%BA%93/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/27/%E5%9C%A8%E8%B6%8A%E7%8B%B1%E5%90%8E%E7%9A%84-ios-%E4%B8%8A%E6%9B%B4%E6%96%B0-lookin-%E9%93%BE%E6%8E%A5%E5%BA%93/</guid><description>Lookin 是免费的 iOS App UI 分析工具，还具有简单的动态调试功能。 越狱后如果要对第三方 App 进行界面分析，需要安装 LookinLoader 插件。 这个插件加载 LookinServer.framework 的路径是 /usr/li</description></item><item><title>iOS 格式化浮点数时去掉末尾的 0</title><link>/2019/12/16/ios-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0%E6%97%B6%E5%8E%BB%E6%8E%89%E6%9C%AB%E5%B0%BE%E7%9A%84-0/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/16/ios-%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%B5%AE%E7%82%B9%E6%95%B0%E6%97%B6%E5%8E%BB%E6%8E%89%E6%9C%AB%E5%B0%BE%E7%9A%84-0/</guid><description>有时候需要把浮点数格式化为字符串显示到界面上，需要去掉末尾多余的 0。 例如 108 * 0.95 希望界面上显示的结果为 102.6 而不是 102.600000 很简单，使用下面的方式进行格式</description></item><item><title>运用 AutoLayout 的优先级例子</title><link>/2019/12/14/%E8%BF%90%E7%94%A8-autolayout-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E4%BE%8B%E5%AD%90/</link><pubDate>Sat, 14 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/14/%E8%BF%90%E7%94%A8-autolayout-%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7%E4%BE%8B%E5%AD%90/</guid><description>当约束条件发生冲突时，系统会使用用优先级高的约束。 还可以通过设置约束为 deactive 状态来使约束不生效。 利用好约束的优先级，可以使布局代码简洁、逻辑清晰</description></item><item><title>在 iOS 里使用 Flexbox 布局</title><link>/2019/12/08/%E5%9C%A8-ios-%E9%87%8C%E4%BD%BF%E7%94%A8-flexbox-%E5%B8%83%E5%B1%80/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/08/%E5%9C%A8-ios-%E9%87%8C%E4%BD%BF%E7%94%A8-flexbox-%E5%B8%83%E5%B1%80/</guid><description>iOS 目前只有手动布局和自动布局两种方式，flexbox 布局只能引入第三方库进行支持 这个布局的思想是来自 CSS 里的 flexbox，关于 CSS Flexbox 可以参考这</description></item><item><title>在 swift 里扩展 UIColor 使用十六进制颜色值</title><link>/2019/12/05/%E5%9C%A8-swift-%E9%87%8C%E6%89%A9%E5%B1%95-uicolor-%E4%BD%BF%E7%94%A8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/05/%E5%9C%A8-swift-%E9%87%8C%E6%89%A9%E5%B1%95-uicolor-%E4%BD%BF%E7%94%A8%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC/</guid><description>4.2. The RGB hexadecimal notations: #RRGGBB 十六进制颜色表示方式是 #RRGGBB（6位），带 alpha 的表示方式是 #RRGGBBAA（8位） 取值范围是 00 - FF。 十六进制颜色缩写的表</description></item><item><title>了解 Image 的 capInsets 和 resizingMode</title><link>/2019/12/04/%E4%BA%86%E8%A7%A3-image-%E7%9A%84-capinsets-%E5%92%8C-resizingmode/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/04/%E4%BA%86%E8%A7%A3-image-%E7%9A%84-capinsets-%E5%92%8C-resizingmode/</guid><description>拉伸 UIImage 的时候使用的方法是 resizableImage，它的声明如下： func resizableImage( withCapInsets capInsets: UIEdgeInsets, resizingMode: UIImage.ResizingMode ) -&amp;gt; UIImage capInsets 指定要保护的区域，就是图像的四个角落，如果大小是 0</description></item><item><title>视网膜屏幕下像素对齐计算方法</title><link>/2019/12/03/%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E4%B8%8B%E5%83%8F%E7%B4%A0%E5%AF%B9%E9%BD%90%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0800</pubDate><guid>/2019/12/03/%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E4%B8%8B%E5%83%8F%E7%B4%A0%E5%AF%B9%E9%BD%90%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</guid><description>使用 CoreGraphics 裁剪图片的时候如果计算后的尺寸没有像素对齐，绘制的图像就会有 1px 的透明边框。 像素对齐的算法： 例如需要计算 0.5pt 的高度在当前屏幕下需要多少 px</description></item><item><title>在 iOS 里 100% 还原 Sketch 实现的阴影效果</title><link>/2019/11/19/%E5%9C%A8-ios-%E9%87%8C-100-%E8%BF%98%E5%8E%9F-sketch-%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</link><pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/19/%E5%9C%A8-ios-%E9%87%8C-100-%E8%BF%98%E5%8E%9F-sketch-%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</guid><description>还原不了设计师视觉稿的开发者不是一个合格的页面仔。 Sketch 是 APP 设计的神器，大部分设计师都选择它作为 APP 界面的设计工具。 在 Sketch 里设置一个阴影，效果图和参</description></item><item><title>给 Xcode 添加最新的 iOS DeviceSupport</title><link>/2019/11/18/%E7%BB%99-xcode-%E6%B7%BB%E5%8A%A0%E6%9C%80%E6%96%B0%E7%9A%84-ios-devicesupport/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/18/%E7%BB%99-xcode-%E6%B7%BB%E5%8A%A0%E6%9C%80%E6%96%B0%E7%9A%84-ios-devicesupport/</guid><description>默认情况下 Xcode 只能调试其内置对应的 iOS 版本，如果发布了新的 iOS 版本而没有更新到与之对应的新版本 Xcode，就不能进行调试了。 要解决这个问题， 需要在</description></item><item><title>swift 里正确的实现一个 NSTextStorage 子类</title><link>/2019/11/11/swift-%E9%87%8C%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-nstextstorage-%E5%AD%90%E7%B1%BB/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate><guid>/2019/11/11/swift-%E9%87%8C%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-nstextstorage-%E5%AD%90%E7%B1%BB/</guid><description>即使你按照官方的文档来操作依然有可能会掉进坑里，因为 swift 的实现和 objc 稍有不同。 NSTextStorage 是基于 NSMutableAttributedString 的一个虚基类。 这意味着当你写一个 NSTextStorage 的子类时，必须正确实现</description></item><item><title>iOS 13 下访问受限制的 _ivar</title><link>/2019/06/09/ios-13-%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-_ivar/</link><pubDate>Sun, 09 Jun 2019 00:00:00 +0800</pubDate><guid>/2019/06/09/ios-13-%E4%B8%8B%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E5%88%B6%E7%9A%84-_ivar/</guid><description>在 iOS 13 之前，一般是使用 KVC 来实现访问私有的实例变量，比如要访问 UITextField 的 _placeholderLabel 一般会这么做： extension UITextField { var placeholderLabel: UILabel? { get { return value(forKey: &amp;#34;_placeholderLabel&amp;#34;) as? UILabel } } } 一直到 iOS 12，这个方法运行</description></item><item><title>模仿微信适配 iPad 的布局方式</title><link>/2019/05/08/%E6%A8%A1%E4%BB%BF%E5%BE%AE%E4%BF%A1%E9%80%82%E9%85%8D-ipad-%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</link><pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate><guid>/2019/05/08/%E6%A8%A1%E4%BB%BF%E5%BE%AE%E4%BF%A1%E9%80%82%E9%85%8D-ipad-%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</guid><description>微信在 iPad 上竖屏时显示的样式和手机版一样，横屏的显示为分隔视图。 UIKit 里可以实现这样的效果的组件是UISplitViewController。 接下</description></item><item><title>在 iOS 中使用 icofont 字体</title><link>/2019/04/30/%E5%9C%A8-ios-%E4%B8%AD%E4%BD%BF%E7%94%A8-icofont-%E5%AD%97%E4%BD%93/</link><pubDate>Tue, 30 Apr 2019 00:00:00 +0800</pubDate><guid>/2019/04/30/%E5%9C%A8-ios-%E4%B8%AD%E4%BD%BF%E7%94%A8-icofont-%E5%AD%97%E4%BD%93/</guid><description>获取 icofont 可以在 icofont.com 下载到 icofont.ttf，里面包含了很多图标。 把下载回来的 icofont.ttf 拖到项目里，或者新建一个 fonts.bundle 用来放字体资源。 在 APP 启动的时候注册字</description></item><item><title>在 ObjC 项目里使用 Swift 静态库</title><link>/2019/03/29/%E5%9C%A8-objc-%E9%A1%B9%E7%9B%AE%E9%87%8C%E4%BD%BF%E7%94%A8-swift-%E9%9D%99%E6%80%81%E5%BA%93/</link><pubDate>Fri, 29 Mar 2019 00:00:00 +0800</pubDate><guid>/2019/03/29/%E5%9C%A8-objc-%E9%A1%B9%E7%9B%AE%E9%87%8C%E4%BD%BF%E7%94%A8-swift-%E9%9D%99%E6%80%81%E5%BA%93/</guid><description>Xcode 9 开始 Swift 支持编译生成静态类型的 framework 如果给之前的 ObjC 项目直接添加 Swift 写的 framework，在编译的时候会报错，错误信息是无法找到 Swift 的方法。 解决方</description></item></channel></rss>